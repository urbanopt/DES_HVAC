# insert your copyright here

# see the URL below for information on how to write OpenStudio measures
# http://nrel.github.io/OpenStudio-user-documentation/reference/measure_writing_guide/
require 'openstudio-extension'
require 'openstudio/extension/core/os_lib_hvac.rb'
require 'erb'
# start the measure
class GenerateTimeSeriesForHydronicHVACSystem < OpenStudio::Measure::ModelMeasure
  # human readable name
  def name
    # Measure name should be the title case of the class name.
    'Generate Time Series for Hydronic HVAC System'
  end

  # human readable description
  def description
    'This measure will replace an existing HVAC system with a hydronic HVAC system (System 7, VAV with Reheat), and allows the user to change the temperature setpoints and design temperature differentials
	for the resulting hot water and chilled water loops. Though this measure adds primary equipment models (a chiller, cooling tower, and boiler) to the model, it is intended for generating demand-side load profiles,
	which could also be used in modeling a district thermal energy system. This measure is intended for use with the reporting measure Export Time Series Loads CSV.'
  end

  # human readable description of modeling approach
  def modeler_description
    'This measure assumes that the heating and cooling hydronic loops are named as they are in the configuration generated by
	the "Add Sys7 VAV w Reheat" measure. This measure implements the Add Sys7 VAV with Reheat Measure, as well as leveraging the "Add Output Variable" measure
	for particular output variables, and the "Ambient Loop Temperature Setpoint Measure" for altering loop temperature setpoints. This measure will be extended to support
	different types of HVAC systems in the future.'
  end

  # define the arguments that the user will input
  def arguments(_model)
    args = OpenStudio::Measure::OSArgumentVector.new

    # the name of the space to add to the model
    hhw_setpoint = OpenStudio::Ruleset::OSArgument.makeDoubleArgument('hhw_setpoint_temperature', true)
    hhw_setpoint.setUnits('Degrees Celsius')
    hhw_setpoint.setDisplayName('Hot Water Loop Temperature')
    hhw_setpoint.setDefaultValue(55)
    hhw_setpoint.setDescription('Temperature setpoint for the hot water loop')
    args << hhw_setpoint

    hhw_delta = OpenStudio::Ruleset::OSArgument.makeDoubleArgument('design_delta_hhw', true)
    hhw_delta.setUnits('Delta Temperature')
    hhw_delta.setDefaultValue(11)
    hhw_delta.setDisplayName('Hot Water Loop Design Delta Temperature')
    hhw_delta.setDescription('Delta design temperature for the hot water loop')
    args << hhw_delta

    chw_setpoint = OpenStudio::Ruleset::OSArgument.makeDoubleArgument('chw_setpoint_temperature', true)
    chw_setpoint.setUnits('Degrees Celsius')
    chw_setpoint.setDisplayName('Chilled Water Loop Temperature')
    chw_setpoint.setDefaultValue(7.3)
    chw_setpoint.setDescription('Temperature setpoint for the chilled water loop')
    args << chw_setpoint

    chw_delta = OpenStudio::Ruleset::OSArgument.makeDoubleArgument('design_delta_chw', true)
    chw_delta.setUnits('Delta Temperature')
    chw_delta.setDefaultValue(5)
    chw_delta.setDisplayName('Chilled Water Loop Design Delta Temperature')
    chw_delta.setDescription('Delta design temperature for the chilled water loop')
    args << chw_delta
	
    return args
  end

  # define what happens when the measure is run
  def run(model, runner, user_arguments)
    super(model, runner, user_arguments)

    # use the built-in error checking
    # if !runner.validateUserArguments(arguments(model), user_arguments)
    # return false
    # end

    return false unless runner.validateUserArguments(arguments(model), user_arguments)

    hhw_loop_setpoint = runner.getDoubleArgumentValue('hhw_setpoint_temperature', user_arguments)
    hhw_loop_delta = runner.getDoubleArgumentValue('design_delta_hhw', user_arguments)

    chw_loop_setpoint = runner.getDoubleArgumentValue('chw_setpoint_temperature', user_arguments)
    chw_loop_delta = runner.getDoubleArgumentValue('design_delta_chw', user_arguments)

    # use the built-in error checking
    # if not runner.validateUserArguments(arguments(model), user_arguments)
    # return false
    # end

    if chw_loop_setpoint <= 0 || hhw_loop_setpoint <= 0 || chw_loop_delta <= 0 || hhw_loop_delta <= 0
      runner.registerError('At least one loop setpoint or loop temperature differential is too low. Please choose a value >0.')
      return false
    end

    # Report initial condition of model
    OsLib_HVAC.reportConditions(model, runner, 'initial')

    # Remove Air/Plant Loops and Zone Equipment
    OsLib_HVAC.removeEquipment(model, runner)

    # Report final condition of model
    OsLib_HVAC.reportConditions(model, runner, 'final')

    # System Type 7: VAV w/ Reheat
    # This measure creates:
    # a single hot water loop with a natural gas boiler for the building
    # a single chilled water loop with water cooled chiller for the building
    # a single condenser water loop for heat rejection from the chiller
    # a VAV system w/ hot water heating, chilled water cooling, and
    # hot water reheat for each story of the building

    always_on = model.alwaysOnDiscreteSchedule

    # Hot Water Plant

    hw_loop = OpenStudio::Model::PlantLoop.new(model)
    hw_loop.setName('Hot Water Loop for VAV with Reheat')
    hw_sizing_plant = hw_loop.sizingPlant
    hw_sizing_plant.setLoopType('Heating')
    hw_sizing_plant.setDesignLoopExitTemperature(82.0) # TODO: units
    hw_sizing_plant.setLoopDesignTemperatureDifference(11.0)

    hw_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

    boiler = OpenStudio::Model::BoilerHotWater.new(model)

    boiler_eff_f_of_temp = OpenStudio::Model::CurveBiquadratic.new(model)
    boiler_eff_f_of_temp.setName('Boiler Efficiency')
    boiler_eff_f_of_temp.setCoefficient1Constant(1.0)
    boiler_eff_f_of_temp.setInputUnitTypeforX('Dimensionless')
    boiler_eff_f_of_temp.setInputUnitTypeforY('Dimensionless')
    boiler_eff_f_of_temp.setOutputUnitType('Dimensionless')

    boiler.setNormalizedBoilerEfficiencyCurve(boiler_eff_f_of_temp)
    boiler.setEfficiencyCurveTemperatureEvaluationVariable('LeavingBoiler')

    boiler_bypass_pipe = OpenStudio::Model::PipeAdiabatic.new(model)

    hw_supply_outlet_pipe = OpenStudio::Model::PipeAdiabatic.new(model)

    # Add the components to the hot water loop
    hw_supply_inlet_node = hw_loop.supplyInletNode
    hw_supply_outlet_node = hw_loop.supplyOutletNode
    hw_pump.addToNode(hw_supply_inlet_node)
    hw_loop.addSupplyBranchForComponent(boiler)
    hw_loop.addSupplyBranchForComponent(boiler_bypass_pipe)
    hw_supply_outlet_pipe.addToNode(hw_supply_outlet_node)

    # Add a setpoint manager to control the
    # hot water to a constant temperature
    hw_t_c = OpenStudio.convert(153, 'F', 'C').get
    hw_t_sch = OpenStudio::Model::ScheduleRuleset.new(model)
    hw_t_sch.setName('HW Temp')
    hw_t_sch.defaultDaySchedule.setName('HW Temp Default')
    hw_t_sch.defaultDaySchedule.addValue(OpenStudio::Time.new(0, 24, 0, 0), hw_t_c)
    hw_t_stpt_manager = OpenStudio::Model::SetpointManagerScheduled.new(model, hw_t_sch)
    hw_t_stpt_manager.addToNode(hw_supply_outlet_node)

    # Chilled Water Plant

    chw_loop = OpenStudio::Model::PlantLoop.new(model)
    chw_loop.setName('Chilled Water Loop for VAV with Reheat')
    chw_sizing_plant = chw_loop.sizingPlant
    chw_sizing_plant.setLoopType('Cooling')
    chw_sizing_plant.setDesignLoopExitTemperature(7.22) # TODO: units
    chw_sizing_plant.setLoopDesignTemperatureDifference(6.67)

    chw_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

    clg_cap_f_of_temp = OpenStudio::Model::CurveBiquadratic.new(model)
    clg_cap_f_of_temp.setCoefficient1Constant(1.0215158)
    clg_cap_f_of_temp.setCoefficient2x(0.037035864)
    clg_cap_f_of_temp.setCoefficient3xPOW2(0.0002332476)
    clg_cap_f_of_temp.setCoefficient4y(-0.003894048)
    clg_cap_f_of_temp.setCoefficient5yPOW2(-6.52536e-005)
    clg_cap_f_of_temp.setCoefficient6xTIMESY(-0.0002680452)
    clg_cap_f_of_temp.setMinimumValueofx(5.0)
    clg_cap_f_of_temp.setMaximumValueofx(10.0)
    clg_cap_f_of_temp.setMinimumValueofy(24.0)
    clg_cap_f_of_temp.setMaximumValueofy(35.0)

    eir_f_of_avail_to_nom_cap = OpenStudio::Model::CurveBiquadratic.new(model)
    eir_f_of_avail_to_nom_cap.setCoefficient1Constant(0.70176857)
    eir_f_of_avail_to_nom_cap.setCoefficient2x(-0.00452016)
    eir_f_of_avail_to_nom_cap.setCoefficient3xPOW2(0.0005331096)
    eir_f_of_avail_to_nom_cap.setCoefficient4y(-0.005498208)
    eir_f_of_avail_to_nom_cap.setCoefficient5yPOW2(0.0005445792)
    eir_f_of_avail_to_nom_cap.setCoefficient6xTIMESY(-0.0007290324)
    eir_f_of_avail_to_nom_cap.setMinimumValueofx(5.0)
    eir_f_of_avail_to_nom_cap.setMaximumValueofx(10.0)
    eir_f_of_avail_to_nom_cap.setMinimumValueofy(24.0)
    eir_f_of_avail_to_nom_cap.setMaximumValueofy(35.0)

    eir_f_of_plr = OpenStudio::Model::CurveQuadratic.new(model)
    eir_f_of_plr.setCoefficient1Constant(0.06369119)
    eir_f_of_plr.setCoefficient2x(0.58488832)
    eir_f_of_plr.setCoefficient3xPOW2(0.35280274)
    eir_f_of_plr.setMinimumValueofx(0.0)
    eir_f_of_plr.setMaximumValueofx(1.0)

    chiller = OpenStudio::Model::ChillerElectricEIR.new(model,
                                                        clg_cap_f_of_temp,
                                                        eir_f_of_avail_to_nom_cap,
                                                        eir_f_of_plr)

    chiller_bypass_pipe = OpenStudio::Model::PipeAdiabatic.new(model)

    chw_supply_outlet_pipe = OpenStudio::Model::PipeAdiabatic.new(model)

    # Add the components to the chilled water loop
    chw_supply_inlet_node = chw_loop.supplyInletNode
    chw_supply_outlet_node = chw_loop.supplyOutletNode
    chw_pump.addToNode(chw_supply_inlet_node)
    chw_loop.addSupplyBranchForComponent(chiller)
    chw_loop.addSupplyBranchForComponent(chiller_bypass_pipe)
    chw_supply_outlet_pipe.addToNode(chw_supply_outlet_node)

    # Add a setpoint manager to control the
    # chilled water to a constant temperature
    chw_t_c = OpenStudio.convert(44, 'F', 'C').get
    chw_t_sch = OpenStudio::Model::ScheduleRuleset.new(model)
    chw_t_sch.setName('CHW Temp')
    chw_t_sch.defaultDaySchedule.setName('HW Temp Default')
    chw_t_sch.defaultDaySchedule.addValue(OpenStudio::Time.new(0, 24, 0, 0), chw_t_c)
    chw_t_stpt_manager = OpenStudio::Model::SetpointManagerScheduled.new(model, chw_t_sch)
    chw_t_stpt_manager.addToNode(chw_supply_outlet_node)

    # Condenser System

    cw_loop = OpenStudio::Model::PlantLoop.new(model)
    cw_loop.setName('Condenser Water Loop for VAV with Reheat')
    cw_sizing_plant = cw_loop.sizingPlant
    cw_sizing_plant.setLoopType('Condenser')
    cw_sizing_plant.setDesignLoopExitTemperature(29.4) # TODO: units
    cw_sizing_plant.setLoopDesignTemperatureDifference(5.6)

    cw_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

    clg_tower = OpenStudio::Model::CoolingTowerSingleSpeed.new(model)

    clg_tower_bypass_pipe = OpenStudio::Model::PipeAdiabatic.new(model)

    cw_supply_outlet_pipe = OpenStudio::Model::PipeAdiabatic.new(model)

    # Add the components to the condenser water loop
    cw_supply_inlet_node = cw_loop.supplyInletNode
    cw_supply_outlet_node = cw_loop.supplyOutletNode
    cw_pump.addToNode(cw_supply_inlet_node)
    cw_loop.addSupplyBranchForComponent(clg_tower)
    cw_loop.addSupplyBranchForComponent(clg_tower_bypass_pipe)
    cw_supply_outlet_pipe.addToNode(cw_supply_outlet_node)
    cw_loop.addDemandBranchForComponent(chiller)

    # Add a setpoint manager to control the
    # condenser water to follow the OA temp
    cw_t_stpt_manager = OpenStudio::Model::SetpointManagerFollowOutdoorAirTemperature.new(model)
    cw_t_stpt_manager.addToNode(cw_supply_outlet_node)

    # Make a Packaged VAV w/ PFP Boxes for each story of the building
    model.getBuildingStorys.sort.each do |story|
      air_loop = OpenStudio::Model::AirLoopHVAC.new(model)
      air_loop.setName('VAV with Reheat')
      sizingSystem = air_loop.sizingSystem
      sizingSystem.setCentralCoolingDesignSupplyAirTemperature(12.8)
      sizingSystem.setCentralHeatingDesignSupplyAirTemperature(12.8)

      fan = OpenStudio::Model::FanVariableVolume.new(model, always_on)
      fan.setPressureRise(500)

      htg_coil = OpenStudio::Model::CoilHeatingWater.new(model, always_on)
      hw_loop.addDemandBranchForComponent(htg_coil)

      clg_coil = OpenStudio::Model::CoilCoolingWater.new(model, always_on)
      chw_loop.addDemandBranchForComponent(clg_coil)

      oa_controller = OpenStudio::Model::ControllerOutdoorAir.new(model)

      oa_system = OpenStudio::Model::AirLoopHVACOutdoorAirSystem.new(model, oa_controller)

      # Add the components to the air loop
      # in order from closest to zone to furthest from zone
      supply_inlet_node = air_loop.supplyInletNode
      supply_outlet_node = air_loop.supplyOutletNode
      fan.addToNode(supply_inlet_node)
      htg_coil.addToNode(supply_inlet_node)
      clg_coil.addToNode(supply_inlet_node)
      oa_system.addToNode(supply_inlet_node)

      # Add a setpoint manager to control the
      # supply air to a constant temperature
      sat_c = OpenStudio.convert(55, 'F', 'C').get
      sat_sch = OpenStudio::Model::ScheduleRuleset.new(model)
      sat_sch.setName('Supply Air Temp')
      sat_sch.defaultDaySchedule.setName('Supply Air Temp Default')
      sat_sch.defaultDaySchedule.addValue(OpenStudio::Time.new(0, 24, 0, 0), sat_c)
      sat_stpt_manager = OpenStudio::Model::SetpointManagerScheduled.new(model, sat_sch)
      sat_stpt_manager.addToNode(supply_outlet_node)

      # Get all zones on this story
      zones = []
      story.spaces.each do |space|
        zones << space.thermalZone.get if space.thermalZone.is_initialized
      end

      # Make a VAV terminal with HW reheat for each zone on this story
      # and hook the reheat coil to the HW loop
      zones.each do |zone|
        reheat_coil = OpenStudio::Model::CoilHeatingWater.new(model, always_on)
        hw_loop.addDemandBranchForComponent(reheat_coil)
        vav_terminal = OpenStudio::Model::AirTerminalSingleDuctVAVReheat.new(model, always_on, reheat_coil)
        air_loop.addBranchForZone(zone, vav_terminal.to_StraightComponent)
      end
    end

    # Add desired output variables
    # assign the user inputs to variables
    variable_name = 'Plant Supply Side Cooling Demand Rate'
    variable_name2 = 'Plant Supply Side Heating Demand Rate'
    reporting_frequency = 'hourly'
    key_value = 'Chilled Water Loop for VAV with Reheat'
    key_value2 = 'Hot Water Loop for VAV with Reheat'

    # key_value = runner.getStringArgumentValue('key_value', user_arguments)

    # check the user_name for reasonableness
    # if variable_name == ''
    # runner.registerError('No variable name was entered.')
    # return false
    # end

    # check the user_name for reasonableness
    # if key_value == ''
    # runner.registerInfo("Blank key isn't valid. Changing key to *")
    # key_value == '*'
    # end

    outputVariables = model.getOutputVariables
    # # reporting initial condition of model
    # starting_spaces = model.getSpaces
    runner.registerInitialCondition("The model started with #{outputVariables.size} output variable objects.")

    outputVariable = OpenStudio::Model::OutputVariable.new(variable_name, model)
    outputVariable.setReportingFrequency(reporting_frequency)
    outputVariable.setKeyValue(key_value)

    outputVariable2 = OpenStudio::Model::OutputVariable.new(variable_name2, model)
    outputVariable2.setReportingFrequency(reporting_frequency)
    outputVariable2.setKeyValue(key_value2)

    outputVariables = model.getOutputVariables
    # # reporting final condition of model
    # finishing_spaces = model.getSpaces
    runner.registerFinalCondition("The model finished with #{outputVariables.size} output variable objects.")

    # This measure only works with the names of hydronic loops resulting from the measure to implement system type 7.

    # Set loop setpoints and design delta T for HHW loop.

    hhw_plant_loop = model.getPlantLoopByName('Hot Water Loop for VAV with Reheat').get

    # try and set the temperature of the ambient loop - this includes setting the
    # plant loop min/max temperatures, the sizing plant objects, and the schedules
    hhw_loop_sizing = hhw_plant_loop.sizingPlant
    hhw_loop_sizing.setDesignLoopExitTemperature(hhw_loop_setpoint)
    hhw_loop_sizing.setLoopDesignTemperatureDifference(hhw_loop_delta)

    hhw_plant_loop.supplyOutletNode.setpointManagers.each { |sm| sm.remove }

    hhw_loop_schedule = OpenStudio::Model::ScheduleRuleset.new(model)
    hhw_loop_schedule.setName('Hot Water Loop Loop Temperature Ruleset')
    hhw_loop_schedule.defaultDaySchedule.setName('Hot Water Loop Temperature - Default')
    hhw_loop_schedule.defaultDaySchedule.addValue(OpenStudio::Time.new(0, 24, 0, 0), hhw_loop_setpoint)

    hhw_stpt_manager = OpenStudio::Model::SetpointManagerScheduled.new(model, hhw_loop_schedule)
    hhw_stpt_manager.setName('Hot Water Loop Setpoint Manager - Scheduled')
    hhw_stpt_manager.setControlVariable('Temperature')
    hhw_stpt_manager.addToNode(hhw_plant_loop.supplyOutletNode)

    # report final condition of model
    runner.registerInfo("The hot water loop temperature is now: #{hhw_loop_setpoint}")

    # Set loop setpoints and design delta T for CHW loop.

    chw_plant_loop = model.getPlantLoopByName('Chilled Water Loop for VAV with Reheat').get

    # try and set the temperature of the ambient loop - this includes setting the
    # plant loop min/max temperatures, the sizing plant objects, and the schedules
    chw_loop_sizing = chw_plant_loop.sizingPlant
    chw_loop_sizing.setDesignLoopExitTemperature(chw_loop_setpoint)
    chw_loop_sizing.setLoopDesignTemperatureDifference(chw_loop_delta)

    chw_plant_loop.supplyOutletNode.setpointManagers.each { |sm| sm.remove }

    chw_loop_schedule = OpenStudio::Model::ScheduleRuleset.new(model)
    chw_loop_schedule.setName('Chilled Water Loop Loop Temperature Ruleset')
    chw_loop_schedule.defaultDaySchedule.setName('Chilled Water Loop Temperature - Default')
    chw_loop_schedule.defaultDaySchedule.addValue(OpenStudio::Time.new(0, 24, 0, 0), chw_loop_setpoint)

    chw_stpt_manager = OpenStudio::Model::SetpointManagerScheduled.new(model, chw_loop_schedule)
    chw_stpt_manager.setName('Chilled Water Loop Setpoint Manager - Scheduled')
    chw_stpt_manager.setControlVariable('Temperature')
    chw_stpt_manager.addToNode(chw_plant_loop.supplyOutletNode)

    # report final condition of model
    runner.registerInfo("The chilled water loop temperature is now: #{chw_loop_setpoint}")

    true
  end
end
# register the measure to be used by the application
GenerateTimeSeriesForHydronicHVACSystem.new.registerWithApplication
